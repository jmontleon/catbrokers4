- hosts: localhost
  gather_facts: false
  vars:
    package_server_subscription: "{{ playbook_dir }}/files/packageserver-subscription.yaml"

    svcat: true
    svcat_subscription: "{{ playbook_dir }}/files/svcat/svcat-subscription.yaml"
    svcat_operatorgroup: "{{ playbook_dir }}/files/svcat/svcat-operatorgroup.yaml"
    svcat_namespace: "{{ playbook_dir }}/files/svcat/svcat-namespace.yaml"
    svcat_rh_operators_catalogsource_configmap: "{{ playbook_dir }}/files/svcat/0000_30_06-rh-operators.configmap.yaml"
    svcat_rh_operators_configmap: "{{ playbook_dir }}/files/svcat/0000_30_09-rh-operators.catalogsource.yaml"

    asb: true
    asb_namespace: "{{ playbook_dir }}/files/asb/00-asb-namespace.yaml"
    asb_catalogsource_configmap: "{{ playbook_dir }}/files/asb/01-asb-catalogsource-configmap.yaml"
    asb_catalogsource: "{{ playbook_dir }}/files/asb/02-asb-catalogsource.yaml"
    asb_operatorgroup: "{{ playbook_dir }}/files/asb/03-asb-operatorgroup.yaml"
    asb_subscription: "{{ playbook_dir }}/files/asb/04-asb-subscription.yaml"
    asb_cr: "{{ playbook_dir }}/files/asb/05-asb-cr.yaml"
    asb_clusterrolebinding: "{{ playbook_dir }}/files/asb/06-asb-clusterrolebinding.yaml"

    tsb: true
    tsb_namespace: "{{ playbook_dir }}/files/tsb/00-tsb-namespace.yaml"
    tsb_catalogsource_configmap: "{{ playbook_dir }}/files/tsb/01-tsb-catalogsource-configmap.yaml"
    tsb_catalogsource: "{{ playbook_dir }}/files/tsb/02-tsb-catalogsource.yaml"
    tsb_operatorgroup: "{{ playbook_dir }}/files/tsb/03-tsb-operatorgroup.yaml"
    tsb_subscription: "{{ playbook_dir }}/files/tsb/04-tsb-subscription.yaml"
    tsb_cr: "{{ playbook_dir }}/files/tsb/05-tsb-cr.yaml"

  tasks:
  - name: Check if PackageManifests resource type can be retrieved
    shell: oc get packagemanifests

  - name: Remove limits from rh-operators ConfigMap/CatalogSource
    block:
    - name: Scale down CVO so that limit removal will persist
      shell: oc -n openshift-cluster-version scale --replicas=0 deploy/cluster-version-operator

    - name: Delete rh-operators ConfigMap
      shell: oc delete configmap rh-operators -n openshift-operator-lifecycle-manager || true

    - name: Delete rh-operators CatalogSource
      shell: oc delete catalogsource rh-operators -n openshift-operator-lifecycle-manager || true

    - name: Delete all pods in openshift-operator-lifecycle-manager namespace
      shell: oc delete pods --all -n openshift-operator-lifecycle-manager

    - name: Wait for PackageManifests resource to reappear once packageserver comes back
      shell: oc get packagemanifests
      retries: 20
      register: result
      until: result is succeeded

    - name: Wait for svcat PackageManifest to disappear
      shell: "[ ! $(oc get packagemanifests svcat) ]"
      retries: 20
      register: result
      until: result is succeeded

    - name: Create rh-operators ConfigMap
      shell: oc create -f {{ svcat_rh_operators_configmap }}

    - name: Create rh-operators CatalogSource
      shell: oc create -f {{ svcat_rh_operators_catalogsource_configmap }}

    - name: Delete catalog-operator pod
      shell: oc delete pod -n openshift-operator-lifecycle-manager -l app=catalog-operator

    - name: Wait for svcat PackageManifest to appear
      shell: oc get packagemanifests svcat
      retries: 20
      register: result
      until: result is succeeded

  - name: Create Service Catalog on cluster
    when: svcat
    block:
    - name: Create kube-service-catalog namespace
      shell: oc apply -f {{ svcat_namespace }}

    - name: Create kube-service-catalog OperatorGroup
      shell: oc apply -f {{ svcat_operatorgroup }}

    - name: Delete existing kube-service-catalog Subscriptions
      shell: oc delete subscription --all -n kube-service-catalog

    - name: Delete existing kube-service-catalog CSVs
      shell: oc delete csv --all -n kube-service-catalog

    - name: Create kube-service-catalog Subscription
      shell: oc create -f {{ svcat_subscription }}

    - name: Wait for kube-service-catalog apiserver to become ready
      shell: |
        oc get deployment -n kube-service-catalog apiserver \
        -o go-template={% raw %}'{{ .status.readyReplicas }}'{% endraw %}
      retries: 40
      register: result
      until: result.stdout == "1"

    - name: Wait for kube-service-catalog controller-manager to become ready
      shell: |
        oc get deployment -n kube-service-catalog controller-manager \
        -o go-template={% raw %}'{{ .status.readyReplicas }}'{% endraw %}
      retries: 40
      register: result
      until: result.stdout == "1"

  - name: Create Automation Broker on cluster
    when: asb
    block:
    - name: Create automation-broker namespace
      shell: oc apply -f {{ asb_namespace }}

    - name: Create automation-broker ConfigMap
      shell: oc apply -f {{ asb_catalogsource_configmap }}

    - name: Create automation-broker CatalogSource
      shell: oc apply -f {{ asb_catalogsource }}

    - name: Create automation-broker OperatorGroup
      shell: oc apply -f {{ asb_operatorgroup }}

    - name: Wait for automationbroker PackageManifest to appear
      shell: oc get packagemanifests automationbroker
      retries: 20
      register: result
      until: result is succeeded

    - name: Delete existing automation-broker Subscriptions
      shell: oc delete subscription --all -n openshift-ansible-service-broker

    - name: Delete existing automation-broker CSVs
      shell: oc delete csv --all -n openshift-ansible-service-broker

    - name: Create automation-broker Subscription
      shell: oc create -f {{ asb_subscription }}

    - name: Wait for automationbroker resource type to exist
      shell: oc get crd automationbrokers.automationbroker.io
      retries: 20
      register: result
      until: result is succeeded

    - name: Create automationbroker CR to create instance of broker
      shell: oc apply -f {{ asb_cr }}

    - name: Wait for automation-broker-operator pod to start
      shell: |
        oc get po -n openshift-ansible-service-broker -l name=automation-broker-operator-alm-owned \
        -o go-template={% raw %}'{{ range .items }}{{ .status.phase }}{{ end }}'{% endraw %}
      retries: 20
      register: result
      until: result.stdout == "Running"

    - name: Wait for automation-broker pod to start
      shell: |
        oc get po -n openshift-ansible-service-broker -l app=ansible-service-broker \
        -o go-template={% raw %}'{{ range .items }}{{ .status.phase }}{{ end }}'{% endraw %}
      retries: 20
      register: result
      until: result.stdout == "Running"

    - name: Create automation-broker clusterrolebinding
      shell: oc apply -f {{ asb_clusterrolebinding }}

  - name: Create Template Broker on cluster
    when: tsb
    block:
    - name: Create openshift-template-service-broker namespace
      shell: oc apply -f {{ tsb_namespace }}

    - name: Create template-broker ConfigMap
      shell: oc apply -f {{ tsb_catalogsource_configmap }}

    - name: Create template-broker CatalogSource
      shell: oc apply -f {{ tsb_catalogsource }}

    - name: Create template-broker OperatorGroup
      shell: oc apply -f {{ tsb_operatorgroup }}

    - name: Wait for templateservicebroker PackageManifest to appear
      shell: oc get packagemanifests templateservicebroker
      retries: 20
      register: result
      until: result is succeeded

    - name: Delete existing template-broker Subscriptions
      shell: oc delete subscription --all -n openshift-template-service-broker

    - name: Delete existing template-broker CSVs
      shell: oc delete csv --all -n openshift-template-service-broker

    - name: Create template-broker Subscription
      shell: oc create -f {{ tsb_subscription }}

    - name: Wait for templateservicebrokers resource type to exist
      shell: oc get crd templateservicebrokers.osb.openshift.io
      retries: 20
      register: result
      until: result is succeeded

    - name: Create templateservicebroker CR to create instance of broker
      shell: oc apply -f {{ tsb_cr }}

    - name: Wait for template-service-broker-operator pod to start
      shell: |
        oc get po -n openshift-template-service-broker -l name=template-service-broker-operator-alm-owned \
        -o go-template={% raw %}'{{ range .items }}{{ .status.phase }}{{ end }}'{% endraw %}
      retries: 20
      register: result
      until: result.stdout == "Running"

    - name: Wait for tsb apiserver-1 pod to start
      shell: |
        oc get po -n openshift-template-service-broker -l app=template-service-broker \
        -o go-template={% raw %}'{{ range .items }}{{ .status.phase }}{{ end }}'{% endraw %}
      retries: 20
      register: result
      until: result.stdout == "Running"

